{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTA0BA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKH,IAAKA,EAAKI,IAAKL,EAAQM,UAAU,iBAI9C,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAeG,GAoBxBC,MAjDf,SAAAC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOZ,EAA0BW,EAA1BX,OAAQa,EAAkBF,EAAlBE,OAAQC,EAAUH,EAAVG,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKW,KAEtCV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBACRQ,MCkDNI,6MAvDbC,MAAQ,KAcRC,cAAgB,WAWd,OAVeC,EAAKF,MAAMG,OAAOP,IAAI,SAAAQ,GACnC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,CACLZ,MAAOW,EAAME,cACbzB,OAAQuB,EAAMG,mBACdT,IAAKM,EAAMI,GACXd,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,gBAQtBc,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUb,EAAKc,WADf,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WAER,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,0FApC3BC,QAAQC,IAAI,0DAIZD,QAAQC,IAAI,aAEZT,KAAKX,8CAiCE,IACCN,EAAWiB,KAAKpB,MAAhBG,OAER,OACEpB,EAAAC,EAAAC,cAAA,OAAKE,UAAWgB,EAAS,MAAQ,gBAC9BiB,KAAKpB,MAAMG,OAASiB,KAAKnB,gBAAkB,kBAvDlC6B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.14afcf83.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropType from 'prop-types';\r\nimport './Movie.css';\r\n\r\n// Class가 아닌 Dumb function\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie_Columns\">\r\n                <MoviePoster poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie_Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie_Genrs\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie_Synopsis\">\r\n                    {synopsis}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Dumb function\r\n// Life Cycle도 없고 그냥 function을 리턴할뿐(state도 없다.)\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <img alt={alt} src={poster} className=\"Movie_Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie_Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : PropType.string.isRequired,\r\n    poster : PropType.string.isRequired,\r\n    genres : PropType.array.isRequired,\r\n    synopsis : PropType.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropType.string.isRequired,\r\n    alt : PropType.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropType.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie.js';\n\n\n\nclass App extends Component {\n\n  // Life Cycle\n  // Render: componentWillMount() -> render() -> ComponentDidMount()\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() -> render() -> component\n\n  state = {\n\n  }\n\n  componentWillMount(){\n    console.log('will mount');\n  }\n  \n  componentDidMount(){\n    console.log('did mount');\n\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        key={movie.id}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n      />\n    })\n\n    return movies;\n  }\n\n  // 비동기 function\n  _getMovies = async () => {\n    const movies = await this._callApi(); // await은 성공이 아닌 결과가 끝난 뒤 실행\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n     // AJAX\n     return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n     .then(response => response.json())\n     .then(json => json.data.movies) // 화살표 fucntion은 return을 작성할 필요가 없다.(자동!)\n     .catch(err => console.log(err))\n  }\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n// state를 변경하는 방법 setState() - state를 변경하면 render가 발생한다.\n// this.setState({\n//   greeting : 'Hello again!'\n// })\n\n\n// 00 시간 후에 00 작업을 수행시킨다.\n// setTimeout(() => {\n//   this.setState({\n//     movies : [\n//       {\n//         id : 1,\n//         title : \"Poket Monster1\",\n//         poster : \"http://image.yes24.com/goods/2125649/L\"\n//       },\n//       {\n//         id : 2,\n//         title : \"Poket Monster2\",\n//         poster : \"http://vignette3.wikia.nocookie.net/pokemon/images/e/e2/2%EA%B8%B0_%EA%B7%B9%EC%9E%A5%ED%8C%90_%ED%8F%AC%EC%8A%A4%ED%84%B0_2.jpg/revision/latest?cb=20150812225936&path-prefix=ko\"\n//       },\n//       {\n//         id : 3,\n//         title : \"Poket Monster3\",\n//         poster : \"https://t1.daumcdn.net/cfile/tistory/999C40405C316B5810\"\n//       },\n//       {\n//         id : 4,\n//         title : \"Poket Monster4\",\n//         poster : \"https://vignette.wikia.nocookie.net/pokemon/images/9/99/8%EA%B8%B0_%EA%B7%B9%EC%9E%A5%ED%8C%90_%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg/revision/latest?cb=20101022180227&path-prefix=ko\"\n//       },\n//       {\n//         title : \"Poket Monster5\",\n//         poster : \"https://lh3.googleusercontent.com/proxy/OIHWkhCQOgzGTY-6u-5ugUi6y1hf4o2Lb-dS4duG_aiXe68-0_Lv4hm8Q3f5T5HI7ldCeIigUeCv9V0A4I5CoeDtqf1x50zOpIcFM4mgzbECMQk=w200-h300\"\n//       }\n//     ]\n//   })\n// }, 5000)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}