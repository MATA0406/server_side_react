{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","CardImg","top","width","src","className","MovieGenre","_ref3","genre","CardSubtitle","Movie","_ref","title","genres","synopsis","torrents","date_uploaded","Col","sm","Card","CardBody","CardText","CardTitle","map","index","key","torrent","CardLink","href","url","Button","size","block","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_renderMovies","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","toggleNavbar","bind","assertThisInitialized","collapsed","Navbar","color","light","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","Jumbotron","Spinner","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bab94dde.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropType from 'prop-types';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, CardLink, Col, Button } from 'reactstrap';\r\nimport './Movie.css';\r\n\r\n// Class가 아닌 Dumb function\r\nfunction Movie({title, poster, genres, synopsis, torrents, date_uploaded}){\r\n    return(\r\n        <Col sm=\"3\">\r\n            <Card>\r\n                <div className=\"Movie\">\r\n                    <div className=\"Movie_Columns\">\r\n                        <MoviePoster poster={poster} alt={title}/>\r\n                    </div>\r\n                    <CardBody>\r\n                        <div className=\"Movie_Columns\">\r\n                            <CardText>\r\n                                <small className=\"text-muted\">UpLoad Date: {date_uploaded}</small>\r\n                            </CardText>\r\n                            <CardTitle>\r\n                                <h3>{title}</h3>\r\n                            </CardTitle>\r\n                            <div className=\"Movie_Genrs\">\r\n                                <b>Genre:</b>\r\n                                {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                            </div>\r\n                            <CardText className=\"Movie_Synopsis\">\r\n                            <b>Synopsis:</b> {synopsis}\r\n                            </CardText>\r\n                            { torrents.map((torrent, index) => <p><CardLink href={torrent.url}>Torrent DownLoad{index+1}</CardLink></p> )}\r\n                            { torrents.map((torrent, index) => <Button size=\"lg\" href={torrent.url} block>Torrent DownLoad{index+1}</Button> )}\r\n                        </div>\r\n                    </CardBody>\r\n                </div>\r\n            </Card>\r\n        </Col>\r\n    )\r\n}\r\n\r\n// Dumb function\r\n// Life Cycle도 없고 그냥 function을 리턴할뿐(state도 없다.)\r\nfunction MoviePoster({poster, alt}){\r\n    return(\r\n        <CardImg top width=\"100%\" alt={alt} src={poster} className=\"Movie_Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <CardSubtitle className=\"Movie_Genre\">{genre}</CardSubtitle>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title : PropType.string.isRequired,\r\n    poster : PropType.string.isRequired,\r\n    genres : PropType.array.isRequired,\r\n    synopsis : PropType.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster : PropType.string.isRequired,\r\n    alt : PropType.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre : PropType.string.isRequired\r\n}\r\n\r\nexport default Movie;","import React, { Component } from 'react';\r\nimport { Jumbotron, Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, Spinner } from 'reactstrap';\r\nimport './App.css';\r\nimport Movie from './Movie.js';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  // Life Cycle\r\n  // Render: componentWillMount() -> render() -> ComponentDidMount()\r\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() == true -> componentWillUpdate() -> render() -> component\r\n\r\n  state = {\r\n\r\n  }\r\n\r\n  componentWillMount(){\r\n    console.log('will mount');\r\n  }\r\n  \r\n  componentDidMount(){\r\n    console.log('did mount');\r\n\r\n    this._getMovies();\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie => {\r\n      return <Movie\r\n        title={movie.title_english}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n        torrents={movie.torrents}\r\n        date_uploaded={movie.date_uploaded}\r\n      />\r\n    })\r\n\r\n    return movies;\r\n  }\r\n\r\n  // 비동기 function\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi(); // await은 성공이 아닌 결과가 끝난 뒤 실행\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n     // AJAX\r\n     return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\r\n     .then(response => response.json())\r\n     .then(json => json.data.movies) // 화살표 fucntion은 return을 작성할 필요가 없다.(자동!)\r\n     .catch(err => console.log(err))\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true\r\n    };\r\n  }\r\n\r\n  toggleNavbar() {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar color=\"faded\" light>\r\n          <NavbarBrand href=\"/http://MATA0406.github.io/server_side_react\" className=\"mr-auto\"><h2><img src=\"./favicon.ico\"></img> Movie App</h2></NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n            <Nav navbar>\r\n              <NavItem>\r\n                <NavLink href=\"https://academy.nomadcoders.co/courses/category/KR\">Nomad Coders</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/MATA0406/server_side_react\">GitHub</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n        <Jumbotron>\r\n          <div className={movies ? \"App\" : \"App--loading\"}>\r\n            {this.state.movies ? this._renderMovies() : <h1>Loading... </h1>}<Spinner color=\"danger\" />\r\n          </div>\r\n        </Jumbotron>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n// state를 변경하는 방법 setState() - state를 변경하면 render가 발생한다.\r\n// this.setState({\r\n//   greeting : 'Hello again!'\r\n// })\r\n\r\n\r\n// 00 시간 후에 00 작업을 수행시킨다.\r\n// setTimeout(() => {\r\n//   this.setState({\r\n//     movies : [\r\n//       {\r\n//         id : 1,\r\n//         title : \"Poket Monster1\",\r\n//         poster : \"http://image.yes24.com/goods/2125649/L\"\r\n//       },\r\n//       {\r\n//         id : 2,\r\n//         title : \"Poket Monster2\",\r\n//         poster : \"http://vignette3.wikia.nocookie.net/pokemon/images/e/e2/2%EA%B8%B0_%EA%B7%B9%EC%9E%A5%ED%8C%90_%ED%8F%AC%EC%8A%A4%ED%84%B0_2.jpg/revision/latest?cb=20150812225936&path-prefix=ko\"\r\n//       },\r\n//       {\r\n//         id : 3,\r\n//         title : \"Poket Monster3\",\r\n//         poster : \"https://t1.daumcdn.net/cfile/tistory/999C40405C316B5810\"\r\n//       },\r\n//       {\r\n//         id : 4,\r\n//         title : \"Poket Monster4\",\r\n//         poster : \"https://vignette.wikia.nocookie.net/pokemon/images/9/99/8%EA%B8%B0_%EA%B7%B9%EC%9E%A5%ED%8C%90_%ED%8F%AC%EC%8A%A4%ED%84%B0.jpg/revision/latest?cb=20101022180227&path-prefix=ko\"\r\n//       },\r\n//       {\r\n//         title : \"Poket Monster5\",\r\n//         poster : \"https://lh3.googleusercontent.com/proxy/OIHWkhCQOgzGTY-6u-5ugUi6y1hf4o2Lb-dS4duG_aiXe68-0_Lv4hm8Q3f5T5HI7ldCeIigUeCv9V0A4I5CoeDtqf1x50zOpIcFM4mgzbECMQk=w200-h300\"\r\n//       }\r\n//     ]\r\n//   })\r\n// }, 5000)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}